import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, b as element, p as text, q as space, f as claim_element, h as children, u as claim_text, j as detach_dev, w as claim_space, l as add_location, y as attr_dev, m as insert_dev, z as append_dev, n as noop } from './client.035784c7.js';

/* src/routes/introduction.svx generated by Svelte v3.32.2 */

const file = "src/routes/introduction.svx";

function create_fragment(ctx) {
	let h2;
	let t0;
	let t1;
	let h30;
	let t2;
	let t3;
	let p0;
	let code;
	let t4;
	let t5;
	let a0;
	let t6;
	let t7;
	let a1;
	let t8;
	let t9;
	let t10;
	let p1;
	let t11;
	let strong;
	let t12;
	let t13;
	let t14;
	let p2;
	let t15;
	let t16;
	let br0;
	let t17;
	let h31;
	let t18;
	let t19;
	let ul;
	let li0;
	let a2;
	let t20;
	let t21;
	let li1;
	let a3;
	let t22;
	let t23;
	let li2;
	let t24;
	let t25;
	let br1;
	let t26;
	let h32;
	let t27;
	let t28;
	let p3;
	let t29;
	let a4;
	let t30;
	let t31;

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text("Introduction");
			t1 = space();
			h30 = element("h3");
			t2 = text("About");
			t3 = space();
			p0 = element("p");
			code = element("code");
			t4 = text("localport/geist-ui");
			t5 = text(" is a Svelte implementation for ");
			a0 = element("a");
			t6 = text("styles");
			t7 = text("\noriginating from ");
			a1 = element("a");
			t8 = text("Vercel’s design");
			t9 = text(".");
			t10 = space();
			p1 = element("p");
			t11 = text("The design of ");
			strong = element("strong");
			t12 = text("Vercel");
			t13 = text(" is concise and aesthetic, this is an important reason for popularity of Vercel.\nNow you can implement the styles in your own React project.");
			t14 = space();
			p2 = element("p");
			t15 = text("Geist UI is an open-source design system for building modern websites and applications, all our projects are open source.");
			t16 = space();
			br0 = element("br");
			t17 = space();
			h31 = element("h3");
			t18 = text("Contact");
			t19 = space();
			ul = element("ul");
			li0 = element("li");
			a2 = element("a");
			t20 = text("Chat on Spectrum");
			t21 = space();
			li1 = element("li");
			a3 = element("a");
			t22 = text("Report an issue");
			t23 = space();
			li2 = element("li");
			t24 = text("Welcome share your feedback and ideas. We also love PRs.");
			t25 = space();
			br1 = element("br");
			t26 = space();
			h32 = element("h3");
			t27 = text("License");
			t28 = space();
			p3 = element("p");
			t29 = text("Licensed under the ");
			a4 = element("a");
			t30 = text("MIT LICENSE");
			t31 = text(".");
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Introduction");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			h30 = claim_element(nodes, "H3", {});
			var h30_nodes = children(h30);
			t2 = claim_text(h30_nodes, "About");
			h30_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			code = claim_element(p0_nodes, "CODE", {});
			var code_nodes = children(code);
			t4 = claim_text(code_nodes, "localport/geist-ui");
			code_nodes.forEach(detach_dev);
			t5 = claim_text(p0_nodes, " is a Svelte implementation for ");
			a0 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a0_nodes = children(a0);
			t6 = claim_text(a0_nodes, "styles");
			a0_nodes.forEach(detach_dev);
			t7 = claim_text(p0_nodes, "\noriginating from ");
			a1 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a1_nodes = children(a1);
			t8 = claim_text(a1_nodes, "Vercel’s design");
			a1_nodes.forEach(detach_dev);
			t9 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach_dev);
			t10 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t11 = claim_text(p1_nodes, "The design of ");
			strong = claim_element(p1_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t12 = claim_text(strong_nodes, "Vercel");
			strong_nodes.forEach(detach_dev);
			t13 = claim_text(p1_nodes, " is concise and aesthetic, this is an important reason for popularity of Vercel.\nNow you can implement the styles in your own React project.");
			p1_nodes.forEach(detach_dev);
			t14 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t15 = claim_text(p2_nodes, "Geist UI is an open-source design system for building modern websites and applications, all our projects are open source.");
			p2_nodes.forEach(detach_dev);
			t16 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", {});
			t17 = claim_space(nodes);
			h31 = claim_element(nodes, "H3", {});
			var h31_nodes = children(h31);
			t18 = claim_text(h31_nodes, "Contact");
			h31_nodes.forEach(detach_dev);
			t19 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			a2 = claim_element(li0_nodes, "A", { href: true, rel: true });
			var a2_nodes = children(a2);
			t20 = claim_text(a2_nodes, "Chat on Spectrum");
			a2_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t21 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a3 = claim_element(li1_nodes, "A", { href: true, rel: true });
			var a3_nodes = children(a3);
			t22 = claim_text(a3_nodes, "Report an issue");
			a3_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t23 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			t24 = claim_text(li2_nodes, "Welcome share your feedback and ideas. We also love PRs.");
			li2_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			t25 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t26 = claim_space(nodes);
			h32 = claim_element(nodes, "H3", {});
			var h32_nodes = children(h32);
			t27 = claim_text(h32_nodes, "License");
			h32_nodes.forEach(detach_dev);
			t28 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t29 = claim_text(p3_nodes, "Licensed under the ");
			a4 = claim_element(p3_nodes, "A", { href: true, rel: true });
			var a4_nodes = children(a4);
			t30 = claim_text(a4_nodes, "MIT LICENSE");
			a4_nodes.forEach(detach_dev);
			t31 = claim_text(p3_nodes, ".");
			p3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 1, 0, 1);
			add_location(h30, file, 2, 0, 23);
			add_location(code, file, 3, 3, 41);
			attr_dev(a0, "href", "https://github.com/geist-org/style");
			attr_dev(a0, "rel", "nofollow");
			add_location(a0, file, 3, 66, 104);
			attr_dev(a1, "href", "https://vercel.co/design");
			attr_dev(a1, "rel", "nofollow");
			add_location(a1, file, 7, 17, 197);
			add_location(p0, file, 3, 0, 38);
			add_location(strong, file, 11, 17, 294);
			add_location(p1, file, 11, 0, 277);
			add_location(p2, file, 13, 0, 462);
			add_location(br0, file, 14, 0, 591);
			add_location(h31, file, 15, 0, 596);
			attr_dev(a2, "href", "https://spectrum.chat/geist-ui/svelte?tab=posts");
			attr_dev(a2, "rel", "nofollow");
			add_location(a2, file, 17, 4, 622);
			add_location(li0, file, 17, 0, 618);
			attr_dev(a3, "href", "https://github.com/geist-org/svelte/issues/new");
			attr_dev(a3, "rel", "nofollow");
			add_location(a3, file, 21, 4, 730);
			add_location(li1, file, 21, 0, 726);
			add_location(li2, file, 25, 0, 832);
			add_location(ul, file, 16, 0, 613);
			add_location(br1, file, 27, 0, 904);
			add_location(h32, file, 28, 0, 909);
			attr_dev(a4, "href", "https://github.com/geist-org/svelte/blob/master/LICENSE");
			attr_dev(a4, "rel", "nofollow");
			add_location(a4, file, 29, 22, 948);
			add_location(p3, file, 29, 0, 926);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h30, anchor);
			append_dev(h30, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, code);
			append_dev(code, t4);
			append_dev(p0, t5);
			append_dev(p0, a0);
			append_dev(a0, t6);
			append_dev(p0, t7);
			append_dev(p0, a1);
			append_dev(a1, t8);
			append_dev(p0, t9);
			insert_dev(target, t10, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t11);
			append_dev(p1, strong);
			append_dev(strong, t12);
			append_dev(p1, t13);
			insert_dev(target, t14, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t15);
			insert_dev(target, t16, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t17, anchor);
			insert_dev(target, h31, anchor);
			append_dev(h31, t18);
			insert_dev(target, t19, anchor);
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, a2);
			append_dev(a2, t20);
			append_dev(ul, t21);
			append_dev(ul, li1);
			append_dev(li1, a3);
			append_dev(a3, t22);
			append_dev(ul, t23);
			append_dev(ul, li2);
			append_dev(li2, t24);
			insert_dev(target, t25, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t26, anchor);
			insert_dev(target, h32, anchor);
			append_dev(h32, t27);
			insert_dev(target, t28, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t29);
			append_dev(p3, a4);
			append_dev(a4, t30);
			append_dev(p3, t31);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h30);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t16);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(h31);
			if (detaching) detach_dev(t19);
			if (detaching) detach_dev(ul);
			if (detaching) detach_dev(t25);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t26);
			if (detaching) detach_dev(h32);
			if (detaching) detach_dev(t28);
			if (detaching) detach_dev(p3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Introduction", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Introduction> was created with unknown prop '${key}'`);
	});

	return [];
}

class Introduction extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Introduction",
			options,
			id: create_fragment.name
		});
	}
}

export default Introduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50cm9kdWN0aW9uLmFlZTI3ZDgzLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
