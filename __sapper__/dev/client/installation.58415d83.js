import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, n as noop, a as assign, c as compute_rest_props, e as exclude_internal_props, b as element, f as claim_element, h as children$1, j as detach_dev, k as set_attributes, t as toggle_class, l as add_location, m as insert_dev, o as get_spread_update, p as text, q as space, r as create_component, u as claim_text, w as claim_space, x as claim_component, y as attr_dev, z as append_dev, A as mount_component, B as transition_in, C as transition_out, D as destroy_component } from './client.035784c7.js';

/* components/Dot.svelte generated by Svelte v3.32.2 */

function create_fragment(ctx) {
	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Dot", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dot> was created with unknown prop '${key}'`);
	});

	return [];
}

class Dot extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dot",
			options,
			id: create_fragment.name
		});
	}
}

/* components/Spacer.svelte generated by Svelte v3.32.2 */

const file = "components/Spacer.svelte";

function create_fragment$1(ctx) {
	let span;
	let span_style_value;

	let span_levels = [
		{
			style: span_style_value = `display: ${/*inline*/ ctx[0] ? "inline-block" : "block"}; 
  margin-left: ${/*left*/ ctx[1]}; margin-top: ${/*top*/ ctx[2]};`
		},
		/*$$restProps*/ ctx[3]
	];

	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	const block = {
		c: function create() {
			span = element("span");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { style: true });
			children$1(span).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(span, span_data);
			toggle_class(span, "svelte-1rhqhom", true);
			add_location(span, file, 15, 0, 272);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		p: function update(ctx, [dirty]) {
			set_attributes(span, span_data = get_spread_update(span_levels, [
				dirty & /*inline*/ 1 && span_style_value !== (span_style_value = `display: ${/*inline*/ ctx[0] ? "inline-block" : "block"}; 
  margin-left: ${/*left*/ ctx[1]}; margin-top: ${/*top*/ ctx[2]};`) && { style: span_style_value },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(span, "svelte-1rhqhom", true);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const getMargin = num => {
	return `calc(${num * 15.25}pt + 1px * ${num - 1})`;
};

function instance$1($$self, $$props, $$invalidate) {
	const omit_props_names = ["x","y","inline"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Spacer", slots, []);
	let { x = 1 } = $$props;
	let { y = 1 } = $$props;
	let { inline = false } = $$props;
	let left = getMargin(x);
	let top = getMargin(y);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("x" in $$new_props) $$invalidate(4, x = $$new_props.x);
		if ("y" in $$new_props) $$invalidate(5, y = $$new_props.y);
		if ("inline" in $$new_props) $$invalidate(0, inline = $$new_props.inline);
	};

	$$self.$capture_state = () => ({ getMargin, x, y, inline, left, top });

	$$self.$inject_state = $$new_props => {
		if ("x" in $$props) $$invalidate(4, x = $$new_props.x);
		if ("y" in $$props) $$invalidate(5, y = $$new_props.y);
		if ("inline" in $$props) $$invalidate(0, inline = $$new_props.inline);
		if ("left" in $$props) $$invalidate(1, left = $$new_props.left);
		if ("top" in $$props) $$invalidate(2, top = $$new_props.top);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [inline, left, top, $$restProps, x, y];
}

class Spacer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { x: 4, y: 5, inline: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Spacer",
			options,
			id: create_fragment$1.name
		});
	}

	get x() {
		throw new Error("<Spacer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set x(value) {
		throw new Error("<Spacer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get y() {
		throw new Error("<Spacer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set y(value) {
		throw new Error("<Spacer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inline() {
		throw new Error("<Spacer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inline(value) {
		throw new Error("<Spacer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/installation.svx generated by Svelte v3.32.2 */
const file$1 = "src/routes/installation.svx";

// (18:4) <Snippet width="400px">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("yarn add @geist-ui/react");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "yarn add @geist-ui/react");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(18:4) <Snippet width=\\\"400px\\\">",
		ctx
	});

	return block;
}

// (17:2) <Tabs.Item label="Yarn" value="yarn">
function create_default_slot_15(ctx) {
	let snippet;
	let current;

	snippet = new Snippet({
			props: {
				width: "400px",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(snippet.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(snippet.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(snippet, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const snippet_changes = {};

			if (dirty & /*$$scope*/ 1) {
				snippet_changes.$$scope = { dirty, ctx };
			}

			snippet.$set(snippet_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(snippet.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(snippet.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(snippet, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(17:2) <Tabs.Item label=\\\"Yarn\\\" value=\\\"yarn\\\">",
		ctx
	});

	return block;
}

// (21:4) <Snippet width="400px">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("npm i @geist-ui/react");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "npm i @geist-ui/react");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(21:4) <Snippet width=\\\"400px\\\">",
		ctx
	});

	return block;
}

// (20:2) <Tabs.Item label="Npm" value="npm">
function create_default_slot_13(ctx) {
	let snippet;
	let current;

	snippet = new Snippet({
			props: {
				width: "400px",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(snippet.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(snippet.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(snippet, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const snippet_changes = {};

			if (dirty & /*$$scope*/ 1) {
				snippet_changes.$$scope = { dirty, ctx };
			}

			snippet.$set(snippet_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(snippet.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(snippet.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(snippet, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(20:2) <Tabs.Item label=\\\"Npm\\\" value=\\\"npm\\\">",
		ctx
	});

	return block;
}

// (16:0) <Tabs initialValue="yarn" hideDivider>
function create_default_slot_12(ctx) {
	let tabs_item0;
	let t;
	let tabs_item1;
	let current;

	tabs_item0 = new Tabs.Item({
			props: {
				label: "Yarn",
				value: "yarn",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tabs_item1 = new Tabs.Item({
			props: {
				label: "Npm",
				value: "npm",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tabs_item0.$$.fragment);
			t = space();
			create_component(tabs_item1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tabs_item0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tabs_item1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tabs_item0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tabs_item1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tabs_item0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tabs_item0_changes.$$scope = { dirty, ctx };
			}

			tabs_item0.$set(tabs_item0_changes);
			const tabs_item1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tabs_item1_changes.$$scope = { dirty, ctx };
			}

			tabs_item1.$set(tabs_item1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tabs_item0.$$.fragment, local);
			transition_in(tabs_item1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tabs_item0.$$.fragment, local);
			transition_out(tabs_item1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tabs_item0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tabs_item1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(16:0) <Tabs initialValue=\\\"yarn\\\" hideDivider>",
		ctx
	});

	return block;
}

// (27:0) <Grid xs={24} sm={16}>
function create_default_slot_11(ctx) {
	let pre;

	let raw_value = `<code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> GeistProvider<span class="token punctuation">,</span> CssBaseline <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@geist-ui/react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Application</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">GeistProvider</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"> // ---> Normalize styles
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AppComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"> // ---> Your App Component
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">GeistProvider</span></span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>` + "";

	const block = {
		c: function create() {
			pre = element("pre");
			this.h();
		},
		l: function claim(nodes) {
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children$1(pre);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "language-jsx");
			add_location(pre, file$1, 27, 0, 846);
		},
		m: function mount(target, anchor) {
			insert_dev(target, pre, anchor);
			pre.innerHTML = raw_value;
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(27:0) <Grid xs={24} sm={16}>",
		ctx
	});

	return block;
}

// (26:0) <Grid.Container>
function create_default_slot_10(ctx) {
	let grid;
	let current;

	grid = new Grid({
			props: {
				xs: 24,
				sm: 16,
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(grid.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(grid.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(grid, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const grid_changes = {};

			if (dirty & /*$$scope*/ 1) {
				grid_changes.$$scope = { dirty, ctx };
			}

			grid.$set(grid_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(grid, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(26:0) <Grid.Container>",
		ctx
	});

	return block;
}

// (41:0) <Grid xs={24} sm={16}>
function create_default_slot_9(ctx) {
	let pre;

	let raw_value = `<code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@geist-ui/react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span></code>` + "";

	const block = {
		c: function create() {
			pre = element("pre");
			this.h();
		},
		l: function claim(nodes) {
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children$1(pre);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "language-jsx");
			add_location(pre, file$1, 41, 0, 2758);
		},
		m: function mount(target, anchor) {
			insert_dev(target, pre, anchor);
			pre.innerHTML = raw_value;
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(41:0) <Grid xs={24} sm={16}>",
		ctx
	});

	return block;
}

// (40:0) <Grid.Container>
function create_default_slot_8(ctx) {
	let grid;
	let current;

	grid = new Grid({
			props: {
				xs: 24,
				sm: 16,
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(grid.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(grid.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(grid, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const grid_changes = {};

			if (dirty & /*$$scope*/ 1) {
				grid_changes.$$scope = { dirty, ctx };
			}

			grid.$set(grid_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(grid, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(40:0) <Grid.Container>",
		ctx
	});

	return block;
}

// (52:0) <Grid xs={24} sm={16}>
function create_default_slot_7(ctx) {
	let pre;

	let raw_value = `<code class="language-jsx"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">"@geist-ui/react/esm/button"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span></code>` + "";

	const block = {
		c: function create() {
			pre = element("pre");
			this.h();
		},
		l: function claim(nodes) {
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children$1(pre);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "language-jsx");
			add_location(pre, file$1, 52, 0, 4095);
		},
		m: function mount(target, anchor) {
			insert_dev(target, pre, anchor);
			pre.innerHTML = raw_value;
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(52:0) <Grid xs={24} sm={16}>",
		ctx
	});

	return block;
}

// (51:0) <Grid.Container>
function create_default_slot_6(ctx) {
	let grid;
	let current;

	grid = new Grid({
			props: {
				xs: 24,
				sm: 16,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(grid.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(grid.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(grid, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const grid_changes = {};

			if (dirty & /*$$scope*/ 1) {
				grid_changes.$$scope = { dirty, ctx };
			}

			grid.$set(grid_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(grid, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(51:0) <Grid.Container>",
		ctx
	});

	return block;
}

// (60:30) <Link color target="_blank" rel="nofollow" href="https://github.com/facebook/create-react-app">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("create-react-app");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "create-react-app");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(60:30) <Link color target=\\\"_blank\\\" rel=\\\"nofollow\\\" href=\\\"https://github.com/facebook/create-react-app\\\">",
		ctx
	});

	return block;
}

// (61:112) <Link target="_blank" color rel="nofollow" href="https://github.com/geist-org/react-getting-started">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("a\nsample project related to create react app here");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "a\nsample project related to create react app here");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(61:112) <Link target=\\\"_blank\\\" color rel=\\\"nofollow\\\" href=\\\"https://github.com/geist-org/react-getting-started\\\">",
		ctx
	});

	return block;
}

// (63:84) <Link target="_blank" color rel="nofollow" href="https://github.com/geist-org/react/blob/master/examples/tree-shaking-create-react-app/README.md">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("this example");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "this example");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(63:84) <Link target=\\\"_blank\\\" color rel=\\\"nofollow\\\" href=\\\"https://github.com/geist-org/react/blob/master/examples/tree-shaking-create-react-app/README.md\\\">",
		ctx
	});

	return block;
}

// (66:66) <Link target="_blank" color rel="nofollow" href="https://nextjs.org/docs/advanced-features/custom-app">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("app.jsx");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "app.jsx");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(66:66) <Link target=\\\"_blank\\\" color rel=\\\"nofollow\\\" href=\\\"https://nextjs.org/docs/advanced-features/custom-app\\\">",
		ctx
	});

	return block;
}

// (67:31) <Link target="_blank" color rel="nofollow" href="https://github.com/geist-org/react/blob/master/examples/create-next-app/README.md">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("this example");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "this example");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(67:31) <Link target=\\\"_blank\\\" color rel=\\\"nofollow\\\" href=\\\"https://github.com/geist-org/react/blob/master/examples/create-next-app/README.md\\\">",
		ctx
	});

	return block;
}

// (68:36) <Layout meta={meta}>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(children);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, children);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(68:36) <Layout meta={meta}>",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let h2;
	let t0;
	let t1;
	let h30;
	let t2;
	let t3;
	let p0;
	let t4;
	let a0;
	let t5;
	let t6;
	let a1;
	let t7;
	let t8;
	let a2;
	let t9;
	let t10;
	let t11;
	let spacer0;
	let t12;
	let dot0;
	let t13;
	let spacer1;
	let t14;
	let tabs;
	let t15;
	let spacer2;
	let t16;
	let dot1;
	let t17;
	let grid_container0;
	let t18;
	let spacer3;
	let t19;
	let dot2;
	let t20;
	let grid_container1;
	let t21;
	let spacer4;
	let t22;
	let h31;
	let t23;
	let t24;
	let p1;
	let t25;
	let code0;
	let t26;
	let t27;
	let t28;
	let p2;
	let t29;
	let t30;
	let grid_container2;
	let t31;
	let spacer5;
	let t32;
	let h32;
	let t33;
	let t34;
	let p3;
	let t35;
	let link0;
	let t36;
	let code1;
	let t37;
	let t38;
	let link1;
	let t39;
	let t40;
	let p4;
	let t41;
	let code2;
	let t42;
	let t43;
	let link2;
	let t44;
	let t45;
	let spacer6;
	let t46;
	let h33;
	let t47;
	let t48;
	let p5;
	let t49;
	let code3;
	let t50;
	let t51;
	let link3;
	let t52;
	let link4;
	let t53;
	let t54;
	let p6;
	let t55;
	let t56;
	let t57;
	let layout;
	let current;
	spacer0 = new Spacer({ props: { y: 1 }, $$inline: true });

	dot0 = new Dot({
			props: { type: "success" },
			$$inline: true
		});

	spacer1 = new Spacer({ props: { y: 0.8 }, $$inline: true });

	tabs = new Tabs({
			props: {
				initialValue: "yarn",
				hideDivider: true,
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	spacer2 = new Spacer({ props: { y: 1.5 }, $$inline: true });

	dot1 = new Dot({
			props: { type: "success" },
			$$inline: true
		});

	grid_container0 = new Grid.Container({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	spacer3 = new Spacer({ props: { y: 0.5 }, $$inline: true });

	dot2 = new Dot({
			props: { type: "success" },
			$$inline: true
		});

	grid_container1 = new Grid.Container({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	spacer4 = new Spacer({ props: { y: 1.5 }, $$inline: true });

	grid_container2 = new Grid.Container({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	spacer5 = new Spacer({ props: { y: 1.5 }, $$inline: true });

	link0 = new Link({
			props: {
				color: true,
				target: "_blank",
				rel: "nofollow",
				href: "https://github.com/facebook/create-react-app",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	link1 = new Link({
			props: {
				target: "_blank",
				color: true,
				rel: "nofollow",
				href: "https://github.com/geist-org/react-getting-started",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	link2 = new Link({
			props: {
				target: "_blank",
				color: true,
				rel: "nofollow",
				href: "https://github.com/geist-org/react/blob/master/examples/tree-shaking-create-react-app/README.md",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	spacer6 = new Spacer({ props: { y: 2.5 }, $$inline: true });

	link3 = new Link({
			props: {
				target: "_blank",
				color: true,
				rel: "nofollow",
				href: "https://nextjs.org/docs/advanced-features/custom-app",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	link4 = new Link({
			props: {
				target: "_blank",
				color: true,
				rel: "nofollow",
				href: "https://github.com/geist-org/react/blob/master/examples/create-next-app/README.md",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	layout = new Layout({
			props: {
				meta,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text("Installation");
			t1 = space();
			h30 = element("h3");
			t2 = text("Install library");
			t3 = space();
			p0 = element("p");
			t4 = text("Ensure your have the latest version of ");
			a0 = element("a");
			t5 = text("NodeJS");
			t6 = text(",\nand a package manager: ");
			a1 = element("a");
			t7 = text("NPM");
			t8 = text(" or ");
			a2 = element("a");
			t9 = text("Yarn");
			t10 = text(".");
			t11 = space();
			create_component(spacer0.$$.fragment);
			t12 = space();
			create_component(dot0.$$.fragment);
			t13 = text(" 1. Run script to download:\n");
			create_component(spacer1.$$.fragment);
			t14 = space();
			create_component(tabs.$$.fragment);
			t15 = space();
			create_component(spacer2.$$.fragment);
			t16 = space();
			create_component(dot1.$$.fragment);
			t17 = text(" 2. Import package to your project:\n");
			create_component(grid_container0.$$.fragment);
			t18 = space();
			create_component(spacer3.$$.fragment);
			t19 = space();
			create_component(dot2.$$.fragment);
			t20 = text(" 3. Use the Geist UI components anywhere:\n");
			create_component(grid_container1.$$.fragment);
			t21 = space();
			create_component(spacer4.$$.fragment);
			t22 = space();
			h31 = element("h3");
			t23 = text("Single component");
			t24 = space();
			p1 = element("p");
			t25 = text("Geist UI supports importing single, specific components when you need them. This is referred to as ");
			code0 = element("code");
			t26 = text("tree-shaking");
			t27 = text(".");
			t28 = space();
			p2 = element("p");
			t29 = text("E.g.");
			t30 = space();
			create_component(grid_container2.$$.fragment);
			t31 = space();
			create_component(spacer5.$$.fragment);
			t32 = space();
			h32 = element("h3");
			t33 = text("Create React App");
			t34 = space();
			p3 = element("p");
			t35 = text("A React project created by ");
			create_component(link0.$$.fragment);
			t36 = text(" can\nalso easily use ");
			code1 = element("code");
			t37 = text("@geist-ui/react");
			t38 = text(". You don’t need to make any changes, just install and use. We have ");
			create_component(link1.$$.fragment);
			t39 = text(".");
			t40 = space();
			p4 = element("p");
			t41 = text("If you want to eject certain configs, ");
			code2 = element("code");
			t42 = text("tree-shaking");
			t43 = text(", please refer to ");
			create_component(link2.$$.fragment);
			t44 = text(".");
			t45 = space();
			create_component(spacer6.$$.fragment);
			t46 = space();
			h33 = element("h3");
			t47 = text("Next.js");
			t48 = space();
			p5 = element("p");
			t49 = text("In the ");
			code3 = element("code");
			t50 = text("next.js");
			t51 = text(" project, you need to customize the ");
			create_component(link3.$$.fragment);
			t52 = text(" entry file to load the provider.\nStart your NextJS project with ");
			create_component(link4.$$.fragment);
			t53 = text(".");
			t54 = space();
			p6 = element("p");
			t55 = text("export default (");
			t56 = text(children);
			t57 = text(") => ");
			create_component(layout.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children$1(h2);
			t0 = claim_text(h2_nodes, "Installation");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			h30 = claim_element(nodes, "H3", {});
			var h30_nodes = children$1(h30);
			t2 = claim_text(h30_nodes, "Install library");
			h30_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children$1(p0);
			t4 = claim_text(p0_nodes, "Ensure your have the latest version of ");
			a0 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a0_nodes = children$1(a0);
			t5 = claim_text(a0_nodes, "NodeJS");
			a0_nodes.forEach(detach_dev);
			t6 = claim_text(p0_nodes, ",\nand a package manager: ");
			a1 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a1_nodes = children$1(a1);
			t7 = claim_text(a1_nodes, "NPM");
			a1_nodes.forEach(detach_dev);
			t8 = claim_text(p0_nodes, " or ");
			a2 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a2_nodes = children$1(a2);
			t9 = claim_text(a2_nodes, "Yarn");
			a2_nodes.forEach(detach_dev);
			t10 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			claim_component(spacer0.$$.fragment, nodes);
			t12 = claim_space(nodes);
			claim_component(dot0.$$.fragment, nodes);
			t13 = claim_text(nodes, " 1. Run script to download:\n");
			claim_component(spacer1.$$.fragment, nodes);
			t14 = claim_space(nodes);
			claim_component(tabs.$$.fragment, nodes);
			t15 = claim_space(nodes);
			claim_component(spacer2.$$.fragment, nodes);
			t16 = claim_space(nodes);
			claim_component(dot1.$$.fragment, nodes);
			t17 = claim_text(nodes, " 2. Import package to your project:\n");
			claim_component(grid_container0.$$.fragment, nodes);
			t18 = claim_space(nodes);
			claim_component(spacer3.$$.fragment, nodes);
			t19 = claim_space(nodes);
			claim_component(dot2.$$.fragment, nodes);
			t20 = claim_text(nodes, " 3. Use the Geist UI components anywhere:\n");
			claim_component(grid_container1.$$.fragment, nodes);
			t21 = claim_space(nodes);
			claim_component(spacer4.$$.fragment, nodes);
			t22 = claim_space(nodes);
			h31 = claim_element(nodes, "H3", {});
			var h31_nodes = children$1(h31);
			t23 = claim_text(h31_nodes, "Single component");
			h31_nodes.forEach(detach_dev);
			t24 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children$1(p1);
			t25 = claim_text(p1_nodes, "Geist UI supports importing single, specific components when you need them. This is referred to as ");
			code0 = claim_element(p1_nodes, "CODE", {});
			var code0_nodes = children$1(code0);
			t26 = claim_text(code0_nodes, "tree-shaking");
			code0_nodes.forEach(detach_dev);
			t27 = claim_text(p1_nodes, ".");
			p1_nodes.forEach(detach_dev);
			t28 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children$1(p2);
			t29 = claim_text(p2_nodes, "E.g.");
			p2_nodes.forEach(detach_dev);
			t30 = claim_space(nodes);
			claim_component(grid_container2.$$.fragment, nodes);
			t31 = claim_space(nodes);
			claim_component(spacer5.$$.fragment, nodes);
			t32 = claim_space(nodes);
			h32 = claim_element(nodes, "H3", {});
			var h32_nodes = children$1(h32);
			t33 = claim_text(h32_nodes, "Create React App");
			h32_nodes.forEach(detach_dev);
			t34 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children$1(p3);
			t35 = claim_text(p3_nodes, "A React project created by ");
			claim_component(link0.$$.fragment, p3_nodes);
			t36 = claim_text(p3_nodes, " can\nalso easily use ");
			code1 = claim_element(p3_nodes, "CODE", {});
			var code1_nodes = children$1(code1);
			t37 = claim_text(code1_nodes, "@geist-ui/react");
			code1_nodes.forEach(detach_dev);
			t38 = claim_text(p3_nodes, ". You don’t need to make any changes, just install and use. We have ");
			claim_component(link1.$$.fragment, p3_nodes);
			t39 = claim_text(p3_nodes, ".");
			p3_nodes.forEach(detach_dev);
			t40 = claim_space(nodes);
			p4 = claim_element(nodes, "P", {});
			var p4_nodes = children$1(p4);
			t41 = claim_text(p4_nodes, "If you want to eject certain configs, ");
			code2 = claim_element(p4_nodes, "CODE", {});
			var code2_nodes = children$1(code2);
			t42 = claim_text(code2_nodes, "tree-shaking");
			code2_nodes.forEach(detach_dev);
			t43 = claim_text(p4_nodes, ", please refer to ");
			claim_component(link2.$$.fragment, p4_nodes);
			t44 = claim_text(p4_nodes, ".");
			p4_nodes.forEach(detach_dev);
			t45 = claim_space(nodes);
			claim_component(spacer6.$$.fragment, nodes);
			t46 = claim_space(nodes);
			h33 = claim_element(nodes, "H3", {});
			var h33_nodes = children$1(h33);
			t47 = claim_text(h33_nodes, "Next.js");
			h33_nodes.forEach(detach_dev);
			t48 = claim_space(nodes);
			p5 = claim_element(nodes, "P", {});
			var p5_nodes = children$1(p5);
			t49 = claim_text(p5_nodes, "In the ");
			code3 = claim_element(p5_nodes, "CODE", {});
			var code3_nodes = children$1(code3);
			t50 = claim_text(code3_nodes, "next.js");
			code3_nodes.forEach(detach_dev);
			t51 = claim_text(p5_nodes, " project, you need to customize the ");
			claim_component(link3.$$.fragment, p5_nodes);
			t52 = claim_text(p5_nodes, " entry file to load the provider.\nStart your NextJS project with ");
			claim_component(link4.$$.fragment, p5_nodes);
			t53 = claim_text(p5_nodes, ".");
			p5_nodes.forEach(detach_dev);
			t54 = claim_space(nodes);
			p6 = claim_element(nodes, "P", {});
			var p6_nodes = children$1(p6);
			t55 = claim_text(p6_nodes, "export default (");
			t56 = claim_text(p6_nodes, children);
			t57 = claim_text(p6_nodes, ") => ");
			claim_component(layout.$$.fragment, p6_nodes);
			p6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file$1, 5, 0, 62);
			add_location(h30, file$1, 6, 0, 84);
			attr_dev(a0, "href", "https://nodejs.org/en/download/");
			attr_dev(a0, "rel", "nofollow");
			add_location(a0, file$1, 7, 42, 151);
			attr_dev(a1, "href", "https://www.npmjs.com/");
			attr_dev(a1, "rel", "nofollow");
			add_location(a1, file$1, 11, 23, 248);
			attr_dev(a2, "href", "https://yarnpkg.com/");
			attr_dev(a2, "rel", "nofollow");
			add_location(a2, file$1, 11, 82, 307);
			add_location(p0, file$1, 7, 0, 109);
			add_location(h31, file$1, 47, 0, 3884);
			add_location(code0, file$1, 48, 102, 4012);
			add_location(p1, file$1, 48, 0, 3910);
			add_location(p2, file$1, 49, 0, 4043);
			add_location(h32, file$1, 58, 0, 5140);
			add_location(code1, file$1, 60, 16, 5335);
			add_location(p3, file$1, 59, 0, 5166);
			add_location(code2, file$1, 62, 41, 5635);
			add_location(p4, file$1, 62, 0, 5594);
			add_location(h33, file$1, 64, 0, 5868);
			add_location(code3, file$1, 65, 10, 5895);
			add_location(p5, file$1, 65, 0, 5885);
			add_location(p6, file$1, 67, 0, 6290);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h30, anchor);
			append_dev(h30, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t4);
			append_dev(p0, a0);
			append_dev(a0, t5);
			append_dev(p0, t6);
			append_dev(p0, a1);
			append_dev(a1, t7);
			append_dev(p0, t8);
			append_dev(p0, a2);
			append_dev(a2, t9);
			append_dev(p0, t10);
			insert_dev(target, t11, anchor);
			mount_component(spacer0, target, anchor);
			insert_dev(target, t12, anchor);
			mount_component(dot0, target, anchor);
			insert_dev(target, t13, anchor);
			mount_component(spacer1, target, anchor);
			insert_dev(target, t14, anchor);
			mount_component(tabs, target, anchor);
			insert_dev(target, t15, anchor);
			mount_component(spacer2, target, anchor);
			insert_dev(target, t16, anchor);
			mount_component(dot1, target, anchor);
			insert_dev(target, t17, anchor);
			mount_component(grid_container0, target, anchor);
			insert_dev(target, t18, anchor);
			mount_component(spacer3, target, anchor);
			insert_dev(target, t19, anchor);
			mount_component(dot2, target, anchor);
			insert_dev(target, t20, anchor);
			mount_component(grid_container1, target, anchor);
			insert_dev(target, t21, anchor);
			mount_component(spacer4, target, anchor);
			insert_dev(target, t22, anchor);
			insert_dev(target, h31, anchor);
			append_dev(h31, t23);
			insert_dev(target, t24, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t25);
			append_dev(p1, code0);
			append_dev(code0, t26);
			append_dev(p1, t27);
			insert_dev(target, t28, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t29);
			insert_dev(target, t30, anchor);
			mount_component(grid_container2, target, anchor);
			insert_dev(target, t31, anchor);
			mount_component(spacer5, target, anchor);
			insert_dev(target, t32, anchor);
			insert_dev(target, h32, anchor);
			append_dev(h32, t33);
			insert_dev(target, t34, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t35);
			mount_component(link0, p3, null);
			append_dev(p3, t36);
			append_dev(p3, code1);
			append_dev(code1, t37);
			append_dev(p3, t38);
			mount_component(link1, p3, null);
			append_dev(p3, t39);
			insert_dev(target, t40, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t41);
			append_dev(p4, code2);
			append_dev(code2, t42);
			append_dev(p4, t43);
			mount_component(link2, p4, null);
			append_dev(p4, t44);
			insert_dev(target, t45, anchor);
			mount_component(spacer6, target, anchor);
			insert_dev(target, t46, anchor);
			insert_dev(target, h33, anchor);
			append_dev(h33, t47);
			insert_dev(target, t48, anchor);
			insert_dev(target, p5, anchor);
			append_dev(p5, t49);
			append_dev(p5, code3);
			append_dev(code3, t50);
			append_dev(p5, t51);
			mount_component(link3, p5, null);
			append_dev(p5, t52);
			mount_component(link4, p5, null);
			append_dev(p5, t53);
			insert_dev(target, t54, anchor);
			insert_dev(target, p6, anchor);
			append_dev(p6, t55);
			append_dev(p6, t56);
			append_dev(p6, t57);
			mount_component(layout, p6, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const tabs_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tabs_changes.$$scope = { dirty, ctx };
			}

			tabs.$set(tabs_changes);
			const grid_container0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				grid_container0_changes.$$scope = { dirty, ctx };
			}

			grid_container0.$set(grid_container0_changes);
			const grid_container1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				grid_container1_changes.$$scope = { dirty, ctx };
			}

			grid_container1.$set(grid_container1_changes);
			const grid_container2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				grid_container2_changes.$$scope = { dirty, ctx };
			}

			grid_container2.$set(grid_container2_changes);
			const link0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				link0_changes.$$scope = { dirty, ctx };
			}

			link0.$set(link0_changes);
			const link1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				link1_changes.$$scope = { dirty, ctx };
			}

			link1.$set(link1_changes);
			const link2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				link2_changes.$$scope = { dirty, ctx };
			}

			link2.$set(link2_changes);
			const link3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				link3_changes.$$scope = { dirty, ctx };
			}

			link3.$set(link3_changes);
			const link4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				link4_changes.$$scope = { dirty, ctx };
			}

			link4.$set(link4_changes);
			const layout_changes = {};

			if (dirty & /*$$scope*/ 1) {
				layout_changes.$$scope = { dirty, ctx };
			}

			layout.$set(layout_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(spacer0.$$.fragment, local);
			transition_in(dot0.$$.fragment, local);
			transition_in(spacer1.$$.fragment, local);
			transition_in(tabs.$$.fragment, local);
			transition_in(spacer2.$$.fragment, local);
			transition_in(dot1.$$.fragment, local);
			transition_in(grid_container0.$$.fragment, local);
			transition_in(spacer3.$$.fragment, local);
			transition_in(dot2.$$.fragment, local);
			transition_in(grid_container1.$$.fragment, local);
			transition_in(spacer4.$$.fragment, local);
			transition_in(grid_container2.$$.fragment, local);
			transition_in(spacer5.$$.fragment, local);
			transition_in(link0.$$.fragment, local);
			transition_in(link1.$$.fragment, local);
			transition_in(link2.$$.fragment, local);
			transition_in(spacer6.$$.fragment, local);
			transition_in(link3.$$.fragment, local);
			transition_in(link4.$$.fragment, local);
			transition_in(layout.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(spacer0.$$.fragment, local);
			transition_out(dot0.$$.fragment, local);
			transition_out(spacer1.$$.fragment, local);
			transition_out(tabs.$$.fragment, local);
			transition_out(spacer2.$$.fragment, local);
			transition_out(dot1.$$.fragment, local);
			transition_out(grid_container0.$$.fragment, local);
			transition_out(spacer3.$$.fragment, local);
			transition_out(dot2.$$.fragment, local);
			transition_out(grid_container1.$$.fragment, local);
			transition_out(spacer4.$$.fragment, local);
			transition_out(grid_container2.$$.fragment, local);
			transition_out(spacer5.$$.fragment, local);
			transition_out(link0.$$.fragment, local);
			transition_out(link1.$$.fragment, local);
			transition_out(link2.$$.fragment, local);
			transition_out(spacer6.$$.fragment, local);
			transition_out(link3.$$.fragment, local);
			transition_out(link4.$$.fragment, local);
			transition_out(layout.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h30);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t11);
			destroy_component(spacer0, detaching);
			if (detaching) detach_dev(t12);
			destroy_component(dot0, detaching);
			if (detaching) detach_dev(t13);
			destroy_component(spacer1, detaching);
			if (detaching) detach_dev(t14);
			destroy_component(tabs, detaching);
			if (detaching) detach_dev(t15);
			destroy_component(spacer2, detaching);
			if (detaching) detach_dev(t16);
			destroy_component(dot1, detaching);
			if (detaching) detach_dev(t17);
			destroy_component(grid_container0, detaching);
			if (detaching) detach_dev(t18);
			destroy_component(spacer3, detaching);
			if (detaching) detach_dev(t19);
			destroy_component(dot2, detaching);
			if (detaching) detach_dev(t20);
			destroy_component(grid_container1, detaching);
			if (detaching) detach_dev(t21);
			destroy_component(spacer4, detaching);
			if (detaching) detach_dev(t22);
			if (detaching) detach_dev(h31);
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t28);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t30);
			destroy_component(grid_container2, detaching);
			if (detaching) detach_dev(t31);
			destroy_component(spacer5, detaching);
			if (detaching) detach_dev(t32);
			if (detaching) detach_dev(h32);
			if (detaching) detach_dev(t34);
			if (detaching) detach_dev(p3);
			destroy_component(link0);
			destroy_component(link1);
			if (detaching) detach_dev(t40);
			if (detaching) detach_dev(p4);
			destroy_component(link2);
			if (detaching) detach_dev(t45);
			destroy_component(spacer6, detaching);
			if (detaching) detach_dev(t46);
			if (detaching) detach_dev(h33);
			if (detaching) detach_dev(t48);
			if (detaching) detach_dev(p5);
			destroy_component(link3);
			destroy_component(link4);
			if (detaching) detach_dev(t54);
			if (detaching) detach_dev(p6);
			destroy_component(layout);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Installation", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Installation> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Dot, Spacer });
	return [];
}

class Installation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Installation",
			options,
			id: create_fragment$2.name
		});
	}
}

export default Installation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFsbGF0aW9uLjU4NDE1ZDgzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb21wb25lbnRzL1NwYWNlci5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2luc3RhbGxhdGlvbi5zdngiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGNvbnN0IGdldE1hcmdpbiA9IChudW0pID0+IHtcbiAgICByZXR1cm4gYGNhbGMoJHtudW0gKiAxNS4yNX1wdCArIDFweCAqICR7bnVtIC0gMX0pYDtcbiAgfTtcbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuICBleHBvcnQgbGV0IHggPSAxO1xuICBleHBvcnQgbGV0IHkgPSAxO1xuICBleHBvcnQgbGV0IGlubGluZSA9IGZhbHNlO1xuXG4gIGxldCBsZWZ0ID0gZ2V0TWFyZ2luKHgpO1xuICBsZXQgdG9wID0gZ2V0TWFyZ2luKHkpO1xuPC9zY3JpcHQ+XG5cbjxzcGFuXG4gIHN0eWxlPXtgZGlzcGxheTogJHtpbmxpbmUgPyBcImlubGluZS1ibG9ja1wiIDogXCJibG9ja1wifTsgXG4gIG1hcmdpbi1sZWZ0OiAke2xlZnR9OyBtYXJnaW4tdG9wOiAke3RvcH07YH1cbiAgey4uLiQkcmVzdFByb3BzfVxuLz5cblxuPHN0eWxlPlxuICBzcGFuIHtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogMXB4O1xuICB9XG48L3N0eWxlPlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgRG90LCBTcGFjZXIgfSBmcm9tICBcIi4uLy4uL1wiO1xuPC9zY3JpcHQ+XG5cbiMjIEluc3RhbGxhdGlvblxuXG4jIyMgSW5zdGFsbCBsaWJyYXJ5XG5cbkVuc3VyZSB5b3VyIGhhdmUgdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIFtOb2RlSlNdKGh0dHBzOi8vbm9kZWpzLm9yZy9lbi9kb3dubG9hZC8pLFxuYW5kIGEgcGFja2FnZSBtYW5hZ2VyOiBbTlBNXShodHRwczovL3d3dy5ucG1qcy5jb20vKSBvciBbWWFybl0oaHR0cHM6Ly95YXJucGtnLmNvbS8pLlxuXG48U3BhY2VyIHk9ezF9IC8+XG48RG90IHR5cGU9XCJzdWNjZXNzXCIgLz4gMS4gUnVuIHNjcmlwdCB0byBkb3dubG9hZDpcbjxTcGFjZXIgeT17MC44fSAvPlxuPFRhYnMgaW5pdGlhbFZhbHVlPVwieWFyblwiIGhpZGVEaXZpZGVyPlxuICA8VGFicy5JdGVtIGxhYmVsPVwiWWFyblwiIHZhbHVlPVwieWFyblwiPlxuICAgIDxTbmlwcGV0IHdpZHRoPVwiNDAwcHhcIj55YXJuIGFkZCBAZ2Vpc3QtdWkvcmVhY3Q8L1NuaXBwZXQ+XG4gIDwvVGFicy5JdGVtPlxuICA8VGFicy5JdGVtIGxhYmVsPVwiTnBtXCIgdmFsdWU9XCJucG1cIj5cbiAgICA8U25pcHBldCB3aWR0aD1cIjQwMHB4XCI+bnBtIGkgQGdlaXN0LXVpL3JlYWN0PC9TbmlwcGV0PlxuICA8L1RhYnMuSXRlbT5cbjwvVGFicz5cbjxTcGFjZXIgeT17MS41fSAvPlxuPERvdCB0eXBlPVwic3VjY2Vzc1wiIC8+IDIuIEltcG9ydCBwYWNrYWdlIHRvIHlvdXIgcHJvamVjdDpcblxuPEdyaWQuQ29udGFpbmVyPlxuPEdyaWQgeHM9ezI0fSBzbT17MTZ9PlxuXG5gYGBqc3hcbmltcG9ydCB7IEdlaXN0UHJvdmlkZXIsIENzc0Jhc2VsaW5lIH0gZnJvbSBcIkBnZWlzdC11aS9yZWFjdFwiO1xuXG5jb25zdCBBcHBsaWNhdGlvbiA9ICgpID0+IChcbiAgPEdlaXN0UHJvdmlkZXI+XG4gICAgPENzc0Jhc2VsaW5lIC8+IC8vIC0tLT4gTm9ybWFsaXplIHN0eWxlc1xuICAgIDxBcHBDb21wb25lbnQgLz4gLy8gLS0tPiBZb3VyIEFwcCBDb21wb25lbnRcbiAgPC9HZWlzdFByb3ZpZGVyPlxuKTtcbmBgYFxuXG48L0dyaWQ+XG48L0dyaWQuQ29udGFpbmVyPlxuPFNwYWNlciB5PXsuNX0gLz5cbjxEb3QgdHlwZT1cInN1Y2Nlc3NcIiAvPiAzLiBVc2UgdGhlIEdlaXN0IFVJIGNvbXBvbmVudHMgYW55d2hlcmU6XG5cbjxHcmlkLkNvbnRhaW5lcj5cbjxHcmlkIHhzPXsyNH0gc209ezE2fT5cblxuYGBganN4XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQGdlaXN0LXVpL3JlYWN0XCI7XG5cbmNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gPEJ1dHRvbj5DbGljayBNZTwvQnV0dG9uPjtcbmBgYFxuXG48L0dyaWQ+XG48L0dyaWQuQ29udGFpbmVyPlxuXG48U3BhY2VyIHk9ezEuNX0gLz5cblxuIyMjIFNpbmdsZSBjb21wb25lbnRcblxuR2Vpc3QgVUkgc3VwcG9ydHMgaW1wb3J0aW5nIHNpbmdsZSwgc3BlY2lmaWMgY29tcG9uZW50cyB3aGVuIHlvdSBuZWVkIHRoZW0uIFRoaXMgaXMgcmVmZXJyZWQgdG8gYXMgYHRyZWUtc2hha2luZ2AuXG5cbkUuZy5cblxuPEdyaWQuQ29udGFpbmVyPlxuPEdyaWQgeHM9ezI0fSBzbT17MTZ9PlxuXG5gYGBqc3hcbmltcG9ydCBCdXR0b24gZnJvbSBcIkBnZWlzdC11aS9yZWFjdC9lc20vYnV0dG9uXCI7XG5cbmNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gPEJ1dHRvbj5DbGljayBNZTwvQnV0dG9uPjtcbmBgYFxuXG48L0dyaWQ+XG48L0dyaWQuQ29udGFpbmVyPlxuXG48U3BhY2VyIHk9ezEuNX0gLz5cblxuIyMjIENyZWF0ZSBSZWFjdCBBcHBcblxuQSBSZWFjdCBwcm9qZWN0IGNyZWF0ZWQgYnkgPExpbmsgY29sb3IgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3dcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2NyZWF0ZS1yZWFjdC1hcHBcIj5jcmVhdGUtcmVhY3QtYXBwPC9MaW5rPiBjYW5cbmFsc28gZWFzaWx5IHVzZSBgQGdlaXN0LXVpL3JlYWN0YC4gWW91IGRvbid0IG5lZWQgdG8gbWFrZSBhbnkgY2hhbmdlcywganVzdCBpbnN0YWxsIGFuZCB1c2UuIFdlIGhhdmUgPExpbmsgdGFyZ2V0PVwiX2JsYW5rXCIgY29sb3IgcmVsPVwibm9mb2xsb3dcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2dlaXN0LW9yZy9yZWFjdC1nZXR0aW5nLXN0YXJ0ZWRcIj5hXG5zYW1wbGUgcHJvamVjdCByZWxhdGVkIHRvIGNyZWF0ZSByZWFjdCBhcHAgaGVyZTwvTGluaz4uXG5cbklmIHlvdSB3YW50IHRvIGVqZWN0IGNlcnRhaW4gY29uZmlncywgYHRyZWUtc2hha2luZ2AsIHBsZWFzZSByZWZlciB0byA8TGluayB0YXJnZXQ9XCJfYmxhbmtcIiBjb2xvciByZWw9XCJub2ZvbGxvd1wiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vZ2Vpc3Qtb3JnL3JlYWN0L2Jsb2IvbWFzdGVyL2V4YW1wbGVzL3RyZWUtc2hha2luZy1jcmVhdGUtcmVhY3QtYXBwL1JFQURNRS5tZFwiPnRoaXMgZXhhbXBsZTwvTGluaz4uXG5cbjxTcGFjZXIgeT17Mi41fSAvPlxuXG4jIyMgTmV4dC5qc1xuXG5JbiB0aGUgYG5leHQuanNgIHByb2plY3QsIHlvdSBuZWVkIHRvIGN1c3RvbWl6ZSB0aGUgPExpbmsgdGFyZ2V0PVwiX2JsYW5rXCIgY29sb3IgcmVsPVwibm9mb2xsb3dcIiBocmVmPVwiaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYWR2YW5jZWQtZmVhdHVyZXMvY3VzdG9tLWFwcFwiPmFwcC5qc3g8L0xpbms+IGVudHJ5IGZpbGUgdG8gbG9hZCB0aGUgcHJvdmlkZXIuXG5TdGFydCB5b3VyIE5leHRKUyBwcm9qZWN0IHdpdGggPExpbmsgdGFyZ2V0PVwiX2JsYW5rXCIgY29sb3IgcmVsPVwibm9mb2xsb3dcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2dlaXN0LW9yZy9yZWFjdC9ibG9iL21hc3Rlci9leGFtcGxlcy9jcmVhdGUtbmV4dC1hcHAvUkVBRE1FLm1kXCI+dGhpcyBleGFtcGxlPC9MaW5rPi5cblxuZXhwb3J0IGRlZmF1bHQgKHsgY2hpbGRyZW4gfSkgPT4gPExheW91dCBtZXRhPXttZXRhfT57Y2hpbGRyZW59PC9MYXlvdXQ+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0RBZ0JxQixHQUFNLE1BQUcsY0FBYyxHQUFHLE9BQU87MEJBQ3JDLEdBQUksNEJBQWlCLEdBQUc7O2tCQUNuQyxHQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0RkFGSSxHQUFNLE1BQUcsY0FBYyxHQUFHLE9BQU87MEJBQ3JDLEdBQUksNEJBQWlCLEdBQUc7aURBQ25DLEdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BakJULFNBQVMsR0FBSSxHQUFHO2dCQUNMLEdBQUcsR0FBRyxLQUFLLGNBQWMsR0FBRyxHQUFHLENBQUM7Ozs7Ozs7O09BS3RDLENBQUMsR0FBRyxDQUFDO09BQ0wsQ0FBQyxHQUFHLENBQUM7T0FDTCxNQUFNLEdBQUcsS0FBSztLQUVyQixJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUM7S0FDbEIsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FDY2IsRUFBRTtRQUFNLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFjVixFQUFFO1FBQU0sRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQVdWLEVBQUU7UUFBTSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBZ0JxQyxRQUFROzs7eUJBQVIsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0F2RHRELENBQUM7Ozs7Ozs7b0NBRUQsR0FBRzs7Ozs7Ozs7Ozs7O29DQVNILEdBQUc7Ozs7Ozs7Ozs7Ozs7OztvQ0FjSCxHQUFFOzs7Ozs7Ozs7Ozs7Ozs7b0NBU0YsR0FBRzs7Ozs7Ozs7OztvQ0FXSCxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0FNSCxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBSW9DLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Y0FBakMsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBQVIsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
